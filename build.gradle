buildscript {
    ext {
        junitJupiterVersion = '5.5.2'
        junitPlatformVersion = '1.5.2'
    }
}

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.25.0'
}

group = 'io.github.yesday'
version = '1.0.0-SNAPSHOT'

configurations.all {
    transitive = false
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        failOnVersionConflict()
    }
}

wrapper {
    distributionType = 'all'
}

compileGroovy {
    groovyOptions.configurationScript = file('gradle/groovyCompilerConf.groovy')
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    //region Groovy
    implementation group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.0-beta-3'
    implementation group: 'org.codehaus.groovy', name: 'groovy-templates', version: '3.0.0-beta-3'
    //endregion

    /**
     * Adding the below dependencies is not required but offers the following benefits
     *
     * - Makes the IDE download their sources
     * - Enables IDE autocompletion for scripts under src/main/groovy
     * - Allows debugging and running the unit tests through IDE
     * - Allows running the unit tests through gradle: gradle clean test
     */

    //region ydsu
    implementation group: 'io.github.yesday', name: 'ydsu', version: '1.0.0-SNAPSHOT'
    //endregion

    //region Dev troubleshooting
    implementation group: 'org.apache.ivy', name: 'ivy', version: '2.5.0-rc1'
    //endregion

    //region Testing
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: junitPlatformVersion
    testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: junitPlatformVersion
    testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: junitPlatformVersion
    testImplementation group: 'org.opentest4j', name: 'opentest4j', version: '1.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.0.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    //endregion

    //region Util
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26' // 1.8.0-beta4
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3' // 1.3.0-alpha4
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.25'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    //endregion
}

test {
    // Enable JUnit Platform (a.k.a. JUnit 5) support
    useJUnitPlatform()

    // Always run tests, even when nothing changed
    dependsOn 'cleanTest'

    // Fail the 'test' task on the first test failure
    failFast = true

    // Show test results
    testLogging {
        // Show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true
        // Show assertion failure details
        exceptionFormat = 'full'
        // Log the following events
        events 'FAILED', 'PASSED', 'SKIPPED', 'STANDARD_ERROR', 'STANDARD_OUT', 'STARTED'
    }

    systemProperties = [
            // Allows @BeforeAll and @AfterAll annotations on non-static methods
            'junit.jupiter.testinstance.lifecycle.default'             : System.getenv('junitLifecycle') ?: 'per_class',
            'junit.jupiter.execution.parallel.enabled'                 : System.getenv('junitParallel') ?: 'true',
            // Run methods in same thread
            'junit.jupiter.execution.parallel.mode.default'            : System.getenv('junitParallelMode') ?: 'same_thread',
            // Run top-level classes in parallel
            'junit.jupiter.execution.parallel.mode.classes.default'    : System.getenv('junitParallelModeClasses') ?: 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : System.getenv('junitParallelStrategy') ?: 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getenv('junitParallelThreads') ?: '6'
    ]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}
